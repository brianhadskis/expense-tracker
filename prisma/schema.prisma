// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Group         Group[]
  Category      Category[]
  Subcategory   Subcategory[]
  Transaction   Transaction[]
  Budget        Budget[]
  Bill          Bill[]
  Goal          Goal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String
  name        String
  description String?
  cashflow    Cashflow
  categories  Category[]
}

enum Cashflow {
  IN
  OUT
  SAVING
}

model Category {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String
  name          String
  description   String?
  group         Group         @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  groupId       String
  subcategories Subcategory[]
}

model Subcategory {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String
  name        String
  description String?
  category    Category      @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  categoryId  String
  Transaction Transaction[]
  Bill        Bill[]
}

model Transaction {
  id            String       @id @default(cuid())
  user          User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String
  modified      DateTime     @updatedAt
  date          DateTime     @db.Date
  time          DateTime     @db.Time
  description   String?
  amount        Decimal      @db.Decimal(10, 2)
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  subcategoryId String
  BillPayment   BillPayment?
  GoalPayment   GoalAction?
}

model Budget {
  year      Int    @id @db.Year
  user      User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  january   Json
  february  Json
  march     Json
  april     Json
  may       Json
  june      Json
  july      Json
  august    Json
  september Json
  october   Json
  november  Json
  december  Json

  @@unique([userId, year])
}

model Bill {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         String
  name           String
  description    String?
  subcategory    Subcategory   @relation(fields: [subcategoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  subcategoryId  String
  modified       DateTime      @updatedAt
  startDate      DateTime      @db.Date
  endDate        DateTime?     @db.Date
  frequency      BillFrequency
  amount         Decimal       @db.Decimal(10, 2)
  isAmountFixed  Boolean       @default(true)
  isSubscription Boolean       @default(false)
  isActive       Boolean       @default(true)
  BillPayment    BillPayment[]
}

enum BillFrequency {
  MONTHLY
  BIYEARLY
  YEARLY
  ONE_TIME
}

model BillPayment {
  id            String      @id @default(cuid())
  bill          Bill        @relation(fields: [billId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  billId        String
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transactionId String      @unique
}

model Goal {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String
  name        String
  description String?
  amount      Decimal      @db.Decimal(10, 2)
  isComplete  Boolean      @default(false)
  startDate   DateTime     @db.Date
  endDate     DateTime?    @db.Date
  GoalPayment GoalAction[]
}

model GoalAction {
  id            String      @id @default(cuid())
  goal          Goal        @relation(fields: [goalId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  goalId        String
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transactionId String      @unique
}
